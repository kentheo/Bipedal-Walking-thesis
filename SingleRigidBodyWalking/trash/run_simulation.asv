% simulation of single rigid body dynamics, modified from top_simulation.m
% Programmed by: Zhibin LI 
% Department of Advanced Robotics
% Italian Institute of Technology
clear all
close all
clc;

global uLINK G us uc
us=0.8;
uc=3/4*us;
G = 0*9.8;

id=1;
wdh=[0.05, 0.4, 0.8 ]; % x y z
mass=30;
MakeRigidBody(id, wdh, mass);
%% Initial conditions
uLINK(1).joint(1).r=0.8; %leg length
uLINK(1).joint(1).leg=[0 0 -uLINK(1).joint(1).r]'; % leg vector from joint to contact point in body frame
uLINK(1).R = Rodrigues([0 1 0],deg2rad(0));   % orientation of rigid body
uLINK(1).joint(1).foot.p = [0 0 0]';    % position of contact point of foot/leg in world [m]
% uLINK(1).pcom=[0 0 1.20]';  % position of COM in world [m]
uLINK(1).pcom=uLINK(1).joint(1).foot.p-uLINK(1).R*(uLINK(1).joint(1).offset+uLINK(1).joint(1).leg);  % position of COM in world [m]
uLINK(1).vcom = [1 0 0]';    % velocity of COM in world [m/s]
uLINK(1).w_body = [0 0 1]';  % initial angular velocity of the rigid body in body local frame, used only for initilization
uLINK(1).w = uLINK(1).R*uLINK(1).w_body;  % initial angular velocity of the rigid body in world frame [rad/s]
uLINK(1).vo= uLINK.vcom-cross(uLINK(1).w,uLINK(1).pcom);  % spatial velocity

uLINK(1).joint(1).p=uLINK(1).pcom+uLINK(1).R*uLINK(1).joint(1).offset; % joint position vector in world
uLINK(1).joint(1).v=uLINK(1).vo+cross( uLINK(1).w,uLINK(1).joint(1).p ); % joint velocity vector in world
uLINK(1).joint(1).w=[0 0 0]'; % joint angular position in body frame
uLINK(1).joint(1).theta=[0 0 0]'; % joint angular position in body frame
uLINK(1).joint(1).dleg=[0 0 0]';    % leg velocity vector in body frame
% uLINK(1).joint(1).foot.p = uLINK(1).pcom+uLINK(1).R*(uLINK(1).joint(1).offset+uLINK(1).joint(1).leg);    % position of contact point of foot/leg in world [m]
%% simulation 
Dtime   = 0.0005; % to get more accurate data, reduce Dtime to 0.1 to 0.5 ms
EndTime = 10.0;
time  = 0:Dtime:EndTime;
time_skip = 0.005;
figure
set(gcf,'Position',[40,40,1200,600]);%[left bottom width height]
AX=[-0.5 2.5];  AY=[-.5 .5]; AZ=[-0.0 1.7];  % 3D plot dimension

%% store simulated data
store_grf=[];
store_p=[];
store_v=[];
store_pcom=[];
store_vcom=[];
% store_w=[];

for n = 1:length(time)
    uLINK(1).vcom = uLINK(1).vo + cross(uLINK(1).w,uLINK(1).pcom);    % needed for friction force
    uLINK(1).joint(1).p=uLINK(1).pcom+uLINK(1).R*uLINK(1).joint(1).offset; % joint position vector in world
    uLINK(1).joint(1).v=uLINK(1).vo+cross( uLINK(1).w,uLINK(1).joint(1).p ); % joint velocity vector in world
    uLINK(1).joint(1).foot.p = uLINK(1).pcom+uLINK(1).R*(uLINK(1).joint(1).offset+uLINK(1).joint(1).leg);    % position of contact point of foot/leg in world [m]
    uLINK(1).joint(1).foot.v = uLINK(1).joint(1).v+ cross( (uLINK(1).w+uLINK(1).R*uLINK(1).joint(1).w),uLINK(1).R*uLINK(1).joint(1).leg)  + uLINK(1).R*uLINK(1).joint(1).dleg;

    [f,fc,tau] = contactForce(1,1);                           %  simulate contact forces
    [P,L]   = SE3dynamics(1,f,tau);                  % calculated P L based on all contact forces    
    
%     store_w(n,1:3)=uLINK(1).w';
    store_grf(n,1:3)=fc';
    store_p(n,1:3)=uLINK(1).joint(1).foot.p';
    store_v(n,1:3)=uLINK(1).joint(1).foot.v';
    store_vcom(n,1:3)=uLINK(1).vcom';
    store_pcom(n,1:3)=uLINK(1).pcom';     
    [uLINK(1).pcom, uLINK(1).R] = SE3exp(1, Dtime);              % update the position and orientation
    uLINK(1).w = uLINK(1).w + Dtime * uLINK(1).dw;      % numerical integration of angular velocity
    uLINK(1).vo= uLINK(1).vo+ Dtime * uLINK(1).dvo;    % numerical integration of spatial velocity

    if uLINK(1).pcom(3)<uLINK(1).joint(1).foot.p(3)
        display('face down ground'); beep; break;
    end    
%     if uLINK(1).joint(1).foot.p(3)<0
%         display('face down ground'); beep; break;
%     end 
    show_animation;
end

%%
% return;
%%
plotData;