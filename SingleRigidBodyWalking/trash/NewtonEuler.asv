function [acc_linear,acc_angular] = NewtonEuler(j,ftot,tautot,dt)
global uLINK

acc_linear=ftot./uLINK(j).m;
uLINK(j).pcom = uLINK(j).pcom + uLINK(j).vcom*dt + 0.5*acc_linear*dt*dt;
uLINK(j).vcom = uLINK(j).vcom + acc_linear*dt;


uLINK(j).I = uLINK(1).R*uLINK(j).I_body*uLINK(1).R';
acc_angular = uLINK(j).I \ ( tautot- cross(uLINK(1).w,uLINK(j).I*uLINK(j).w) );
uLINK(j).w = uLINK(j).w + acc_angular*dt;




% P = uLINK(j).m * uLINK(j).vo;     % linear momentum, vo is the velocity of COM
L = uLINK(j).m * cross(w_c,uLINK(j).vo) + Iww * uLINK(j).w; % original: angular momentum: caused by COM particle + rotation around COM
% w_vc=uLINK(j).vo + cross(uLINK(j).w,p_c);
% L = uLINK(j).m * cross(w_c,uLINK(j).vo) +  w_I * uLINK(j).w; % angular momentum: caused by COM particle + rotation around COM

pp = [cross(uLINK(j).w,P);
    cross(uLINK(j).vo,P) + cross(uLINK(j).w,L)];
if nargin == 3
    pp = pp - [f; tau];   % net force torque vector
end
Ia = [Ivv, Iwv'; Iwv, Iww]; % spatial inertia tensor matrix

a0 = -Ia \ pp; % spatial acceleration
uLINK(j).dvo = a0(1:3);
uLINK(j).dw  = a0(4:6);
